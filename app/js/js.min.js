class mainObjectClass {
    constructor() {
        //интервал запросов
        this.requestInterval = 10;

        //время отправки сообщения (переаодим в сек)
        this.messageTime = 23 * 60;

        //время до просрочки (переводим в сек)
        this.expirationTime = 30 * 60;

        //пустой массив под заказы
        this.orders = [];
    }
}
class orderClass {
    constructor(orderNumber) {
        this.unixTime = parseInt(new Date().getTime() / 1000);
        this.date = parseInt(new Date().getDate());
        this.expired = false;
        this.messageSent = false;
        this.complete = false;
        this.completeTime = 0;
        this.inQueue = false;
        this.preparing = false;
        this.orderNumber = orderNumber;
        this.needMessage = false;
        this.remade = false;
    }

    setExpired() {
        this.expired = true;
    }

    setMessageSent() {
        this.messageSent = true;
        this.needMessage = false;
    }

    setNeedMessage(){
        this.needMessage = true;
    }

    setTime(time) {
        this.completeTime = time - this.unixTime;
    }

    setQueue() {
        this.inQueue = true;
        this.preparing = false;
    }

    setPreparing() {
        this.preparing = true;
        this.inQueue = false;
    }

    setComplete() {
        this.complete = true;
        this.preparing = false;
        this.inQueue = false;
    }

    setRemade(){
        this.Complete = false;
        this.Remade = true;
    }

}

function getMainObject() {
    return JSON.parse(localStorage.getItem('mainObject'));
}

function isMainObjectExists() {
    return localStorage.getItem('mainObject') !== null;
}

function setMainObject(mainObject) {
    localStorage.setItem('mainObject', JSON.stringify(mainObject));
}

function ismainObjectContainsOrder(mainObject, orderNumber) {
    for (let i = 0; i < mainObject.orders.length; i++) {
        if (mainObject.orders[i].orderNumber === orderNumber) {
            return true;
        }
    }
    return false;
}

function getSameOrder(newContentObject, orderNumber) {
    for (let i = 0; i < newContentObject.orders.length; i++) {
        if (newContentObject.orders[i].orderNumber === orderNumber) {
            return newContentObject.orders[i].orderNumber;
        }
    }
    return false;
}

function isOrderRemade(mainObject, orderNumber) {
    for (let i = 0; i < mainObject.orders.length; i++) {
        if (mainObject.orders[i].orderNumber === orderNumber && mainObject.orders[i].complete === true) {
            return true;
        }
    }
    return false;
}

function secondsTimeToNormal(seconds) {
    let minutes = Math.floor(seconds / 60) + '';
    let secs = seconds % 60 + '';
    if (secs.length < 2) {
        secs = '0' + secs;
    }
    const result = minutes + ':' + secs;
    return result;
}
const model = {


    callExternalContent() {
        return new Promise((resolve, reject) => {
            const x = new XMLHttpRequest();

            //ajax запрос через прокси cors-anywhere
            x.open('GET', 'https://cors-anywhere.herokuapp.com/https://akson.ru/personal/order/table1/?STORE_ID=11');
            //x.open('GET', 'pz4.html');

            //x.timeout = 5000;
            x.send();
            x.onload = () => {
                if (x.status != 200) {
                    reject(x.statusText)
                } else {
                    resolve(x.responseText || '');
                }
            };
        })
    },
    //
    getContent(externalContent) {
        //вытаскиваем таблицу из исходного кода
        const cutExternalContent = externalContent.substr(3196, externalContent.length - 3370);
        //console.log(cutExternalContent);
        const hiddenTable = document.querySelector('.hidden-table');
        hiddenTable.innerHTML = cutExternalContent;
        //вытаскиваем строки
        const rows = document.getElementsByTagName('tr');
        //переменная для строк фильтрованной таблицы
        let filteredRows = [];

        //удаляем строки заголовков таблиц, удаляем отмененные заказы, формируем одну таблицу из двух
        for (let i = 0; i < rows.length; i++) {
            if (rows[i].innerHTML.length !== 377) {
                if (rows[i].children[3].innerHTML.length > 100) {
                    rows[i].parentNode.removeChild(rows[i]);
                } else {
                    filteredRows.push(rows[i]);
                }
            }
        }
        //удаляем четвертую ячейку
        for (let i = 0; i < filteredRows.length; i++) {
            filteredRows[i].removeChild(filteredRows[i].children[3]);
        }

        const newContentObject = new mainObjectClass();
        filteredRows.forEach((item) => {
            const orderNumber = parseInt(item.children[0].children[0].children[0].innerHTML);
            const order = new orderClass(orderNumber);
            //console.log(item.children[1].children[0].innerHTML.length);
            if (item.children[1].children[0].innerHTML.length > 30) {
                order.setQueue();
            } else if (item.children[2].children[0].innerHTML.length > 30) {
                order.setPreparing();
            }
            newContentObject.orders.push(order);
        })

        //удаляем таблицу
        hiddenTable.innerHTML = '';

        if (!isMainObjectExists()) {
            setMainObject(newContentObject);
            this.getContent(externalContent);
        } else {
            const notFormattedmainObject = getMainObject();
            const mainObject = new mainObjectClass();

            mainObject.requestInterval = notFormattedmainObject.requestInterval;
            mainObject.messageTime = notFormattedmainObject.messageTime;
            mainObject.expirationTime = notFormattedmainObject.expirationTime;

            notFormattedmainObject.orders.forEach((item) => {
                let currentOrder = new orderClass(item.orderNumber);
                currentOrder.expired = item.expired;
                currentOrder.messageSent = item.messageSent;
                currentOrder.complete = item.complete;
                currentOrder.completeTime = item.completeTime;
                currentOrder.inQueue = item.inQueue;
                currentOrder.preparing = item.preparing;
                currentOrder.remade = item.remade;
                currentOrder.unixTime = item.unixTime;
                currentOrder.date = item.date;
                currentOrder.needMessage = item.needMessage;
                mainObject.orders.push(currentOrder);
            })


            // Добавляем новые заказы
            newContentObject.orders.forEach((item, i) => {
                if (!ismainObjectContainsOrder(mainObject, item.orderNumber)) {
                    mainObject.orders.push(newContentObject.orders[i]);
                }
            })

            //если заказ уже есть в старом объекте, добавляем новый статус (в наборе)
            for (let i = 0; i < newContentObject.orders.length; i++) {
                if (ismainObjectContainsOrder(mainObject, newContentObject.orders[i].orderNumber) && newContentObject.orders[i].preparing) {
                    for (let y = 0; y < mainObject.orders.length; y++) {
                        if (mainObject.orders[y].orderNumber === newContentObject.orders[i].orderNumber) {
                            mainObject.orders[y].preparing = true;
                            mainObject.orders[y].inQueue = false;
                        }
                    }
                }
            }

            //если старого заказа нет в списке заказов нового объекта, помечаем старый подтвержденным
            mainObject.orders.forEach((item) => {
                if (!getSameOrder(newContentObject, item.orderNumber)) {
                    item.setComplete();
                }
            })
            //получаем перевыгруженные заказы
            newContentObject.orders.forEach((item) => {
                if (isOrderRemade(mainObject, item.orderNumber)) {
                    for (let i = 0; i < mainObject.orders.length; i++) {
                        if (mainObject.orders[i].orderNumber === item.orderNumber) {
                            mainObject.orders[i].remade = true;
                            mainObject.orders[i].expired = item.expired;
                            mainObject.orders[i].messageSent = false;
                            mainObject.orders[i].unixTime = parseInt(new Date().getTime() / 1000);
                            mainObject.orders[i].complete = false;
                            mainObject.orders[i].completeTime = 0;
                            mainObject.orders[i].inQueue = item.inQueue;
                            mainObject.orders[i].preparing = item.preparing;
                            mainObject.orders[i].date = item.date;
                            mainObject.orders[i].needMessage = item.needMessage;
                        }
                    }
                }
            })

            //задаем время наборки
            mainObject.orders.forEach((item) => {
                if (item.complete === false) {
                    item.setTime(parseInt(new Date().getTime() / 1000));
                }
            })

            //проверяем на просрочку

            mainObject.orders.forEach((item) => {
                if (item.completeTime > mainObject.expirationTime) {
                    item.setExpired();
                }
            })

            //удаляем заказы возрастом более 10 дней
            for (let i = mainObject.orders.length - 1; i >= 0; i--) {
                if (parseInt(new Date().getTime() / 1000) - mainObject.orders[i].unixTime > 864000) {
                    mainObject.orders.splice(i, 1);
                }
            }

            setMainObject(mainObject);
        }
    },

    setWarning() {
        const mainObject = getMainObject();
        mainObject.orders.forEach((item) => {
            if (parseInt(new Date().getTime() / 1000) - item.unixTime > mainObject.messageTime && !item.complete && !item.messageSent) {
                item.needMessage = true;
            }
        })
        setMainObject(mainObject);
    }


}
const view = {
    drawTable() {
        const mainObject = getMainObject();
        const newTable = document.querySelector('.new-table');
        newTable.insertAdjacentHTML('beforeend', '' +
            '                 <thead>' +
            '                    <tr class="new-table__header">\n' +
            '                        <th class="new-table__header-cell">№</th>\n' +
            '                        <th class="new-table__header-cell">Номер заказа</th>\n' +
            '                        <th class="new-table__header-cell">В очереди</th>\n' +
            '                        <th class="new-table__header-cell">В наборе</th>\n' +
            '                        <th class="new-table__header-cell">Завершен</th>\n' +
            '                        <th class="new-table__header-cell">Время</th>\n' +
            '                    </tr>' +
            '                 </thead>');

        let counter = 1;
        mainObject.orders.forEach((item) => {

            let inQueue = '';
            if (item.inQueue === true) {
                inQueue = 'X';
            }
            let preparing = '';
            if (item.preparing === true) {
                preparing = 'X';
            }
            let complete = '';
            if (item.complete === true) {
                complete = 'X';
            }
            let time = secondsTimeToNormal(item.completeTime);
            if (item.date === parseInt(new Date().getDate()) && item.remade && !item.messageSent) {
                newTable.insertAdjacentHTML('beforeend', `
                    <tbody>
                        <tr class="new-table__row new-table__order-remade">
                            <td class="new-table__cell">${counter}</td>
                            <td class="new-table__cell">${item.orderNumber}</td>
                            <td class="new-table__cell">${inQueue}</td>
                            <td class="new-table__cell">${preparing}</td>
                            <td class="new-table__cell">${complete}</td>
                            <td class="new-table__cell">${time}</td>
                        </tr>
                    </tbody>`
                )
            } else if (item.date === parseInt(new Date().getDate()) && !item.expired && !item.messageSent) {
                newTable.insertAdjacentHTML('beforeend', `
                    <tbody>
                        <tr class="new-table__row new-table__order-normal">
                            <td class="new-table__cell">${counter}</td>
                            <td class="new-table__cell">${item.orderNumber}</td>
                            <td class="new-table__cell">${inQueue}</td>
                            <td class="new-table__cell">${preparing}</td>
                            <td class="new-table__cell">${complete}</td>
                            <td class="new-table__cell">${time}</td>
                        </tr>
                    </tbody>`
                )
            } else if (item.date === parseInt(new Date().getDate()) && !item.expired && item.messageSent) {
                newTable.insertAdjacentHTML('beforeend', `
                    <tbody>
                        <tr class="new-table__row new-table__order-warning">
                            <td class="new-table__cell">${counter}</td>
                            <td class="new-table__cell">${item.orderNumber}</td>
                            <td class="new-table__cell">${inQueue}</td>
                            <td class="new-table__cell">${preparing}</td>
                            <td class="new-table__cell">${complete}</td>
                            <td class="new-table__cell">${time}</td>
                        </tr>
                    </tbody>`
                )
            } else if (item.date === parseInt(new Date().getDate()) && item.expired && item.messageSent) {
                newTable.insertAdjacentHTML('beforeend', `
                    <tbody>
                        <tr class="new-table__row new-table__order-expired">
                            <td class="new-table__cell">${counter}</td>
                            <td class="new-table__cell">${item.orderNumber}</td>
                            <td class="new-table__cell">${inQueue}</td>
                            <td class="new-table__cell">${preparing}</td>
                            <td class="new-table__cell">${complete}</td>
                            <td class="new-table__cell">${time}</td>
                        </tr>
                    </tbody>`
                )

            }
            counter++;
        })

    },

    sendMessage(message) {
        const x = new XMLHttpRequest();
        x.open('GET', 'https://api.telegram.org/bot1018757013:AAEHO9accUhscieT0ArRq9iwUeat6BmEzOM/sendMessage?chat_id=-1001471677614&text=' + message);
        x.send();


    },

    sendMessages() {
        const mainObject = getMainObject();
        mainObject.orders.forEach((item) => {
            if (item.needMessage === true) {
                this.sendMessage('Заказ ' + item.orderNumber + ' в наборе уже более ' + mainObject.messageTime / 60 + ' минут');
                //console.log('Заказ ' + item.orderNumber + ' в наборе уже более ' + mainObject.expirationTime / 60 + ' минут')
                item.messageSent = true;
                item.needMessage = false;
            }
        })
        setMainObject(mainObject);
    },

    setPlaceholders() {
        const mainObject = getMainObject();
        document.querySelector('.options__time-to-expire').placeholder = mainObject.expirationTime / 60;
        document.querySelector('.options__time-to-send-message').placeholder = mainObject.messageTime / 60;
        document.querySelector('.options__request-interval').placeholder = mainObject.requestInterval;
    }
}
const controller = {
    mainRoute(){
        let interval = 10;
        if (isMainObjectExists()) {
            const mainObject = getMainObject();
            interval = mainObject.requestInterval;
        }

        model.callExternalContent()
            .then((response) => {
                model.getContent(response);
                model.setWarning();
                view.sendMessages();
                view.drawTable();
                view.setPlaceholders();
                document.getElementById('interval').scrollIntoView();
            })

        window.setTimeout(() => {
            //this.mainRoute();
             window.location.reload();
        }, interval * 1000);
    }
}
document.addEventListener("DOMContentLoaded", () => {
controller.mainRoute();
})

//устанавливаем интервал, время сообщения, время до просрочки
document.querySelector('.options__time-to-expire-button').addEventListener('click', (e) => {
    e.preventDefault();
    const expireTextArea = document.querySelector('.options__time-to-expire');
    if (expireTextArea.value) {
        const mainObject = getMainObject();
        mainObject.expirationTime = parseInt(expireTextArea.value) * 60;
        setMainObject(mainObject);
        expireTextArea.placeholder = expireTextArea.value;
        expireTextArea.value = '';
    } else {
        const messageBox = document.querySelector('.options__message-box-time-to-expire');
        messageBox.style.display = 'block';
        setTimeout(() => {
            messageBox.style.display = 'none';
        }, 1000)
    }
})

document.querySelector('.options__time-to-send-message-button').addEventListener('click', (e) => {
    e.preventDefault();
    const messageTextArea = document.querySelector('.options__time-to-send-message');
    if (messageTextArea.value) {
        const mainObject = getMainObject();
        mainObject.messageTime = parseInt(messageTextArea.value) * 60;
        messageTextArea.placeholder = messageTextArea.value;
        messageTextArea.value = '';
        setMainObject(mainObject);
    } else {
        const messageBox = document.querySelector('.options__message-box-time-to-send-message');
        messageBox.style.display = 'block';
        setTimeout(() => {
            messageBox.style.display = 'none';
        }, 1000)
    }
})

document.querySelector('.options__request-interval-button').addEventListener('click', (e) => {
    e.preventDefault();
    const requestTextArea = document.querySelector('.options__request-interval');
    if (requestTextArea.value && parseInt(requestTextArea.value) >= 10) {
        const mainObject = getMainObject();
        mainObject.requestInterval = parseInt(requestTextArea.value);
        requestTextArea.placeholder = requestTextArea.value;
        requestTextArea.value = '';
        setMainObject(mainObject);
    } else {
        const messageBox = document.querySelector('.options__message-box-request-interval');
        messageBox.style.display = 'block';
        requestTextArea.value = '';
        setTimeout(() => {
            messageBox.style.display = 'none';
        }, 1000)
    }
})

document.querySelector('.reset').addEventListener('click', (e)=>{
    const msg = prompt('Действительно? Все данные удалятся! Для продолжения введите "УДАЛИТЬ!" большими буквами');
    if(msg ==='УДАЛИТЬ!'){
        localStorage.clear();
        window.location.reload();
    }
})
//# sourceMappingURL=data:application/json;charset=utf8;base64,
